Approximation has been used as a technique to allow applications to reduce their quality outcomes in return for faster execution times or lower resource usage. Current approaches treat applications largely as "black boxes", where quality is controlled through program variables referred to as "knobs". The correlations between knob settings and applications’ quality and resource usage are determined through off-line training, and the collected information is subsequently used for runtime optimizations through reconfiguration. These approaches are largely application structure oblivious and are all assuming the training is free.

This paper introduces RAPID, a programming architecture where applications are expressed as a collection of collaborating "services". Each "service" may have multiple approximation levels. Dependencies define the possible interactions between services and their approximation levels, thereby limiting the number of feasible configurations. By making the structure explicit, resource usage and quality notions can be expressed as weighted sums over all "service" levels selected by a configuration. Not all applications have such additive quality or cost models, but there are many applications that fit that model well. The best configuration for a given resource budget maximizes overall quality while taking full advantage of the specified resource budget. Structure also enables RAPID to compute a representative set of configurations. Retraining only the representative set is sufficient to reconstruct the cost model if needed. Retraining is necessary when porting the application to a different device or after a system update, or when resource characteristics change, for instance due to some environmental uncertainties.

RAPID has been implemented on Android and Linux platforms, and has been applied to several benchmark applications. It reduces the number of configurations that needs to be trained, i.e., the size of the representative set, by up to two orders of magnitude as compared to the black box approach with very low prediction errors, both in terms of resource usage (execution time and/or energy consumption) and overall application quality notion. The runtime overhead of RAPID includes (a) the detection of a reconfiguration need, (b) the determination of the best overall configuration under a new budget, and (c) the reconfiguration of the services in the running application. RAPID’s runtime overhead has been shown to be only a small fraction of the application’s execution time and/or energy consumption. A prototype implementation of RAPID is publicly available.
